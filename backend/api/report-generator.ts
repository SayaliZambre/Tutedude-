// Backend service for generating assessment reports

export interface CandidateInfo {
  name: string
  email: string
  position: string
}

export interface SessionData {
  duration: number
  violations: any[]
  detectionLogs: any[]
  integrityScore: number
  timestamp: string
}

export interface AssessmentReport {
  candidate: CandidateInfo
  session: SessionData
  summary: {
    passed: boolean
    recommendation: string
    riskLevel: "low" | "medium" | "high"
  }
  generatedAt: string
}

export class ReportGenerator {
  generateReport(candidate: CandidateInfo, session: SessionData): AssessmentReport {
    const riskLevel = this.calculateRiskLevel(session.integrityScore, session.violations.length)
    const passed = session.integrityScore >= 60 && riskLevel !== "high"

    return {
      candidate,
      session,
      summary: {
        passed,
        recommendation: this.generateRecommendation(session.integrityScore, riskLevel),
        riskLevel,
      },
      generatedAt: new Date().toISOString(),
    }
  }

  generateTextReport(report: AssessmentReport): string {
    const formatTime = (seconds: number) => {
      const mins = Math.floor(seconds / 60)
      const secs = seconds % 60
      return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
    }

    const formatDate = (timestamp: string) => {
      return new Date(timestamp).toLocaleString()
    }

    return `
PROCTORING ASSESSMENT REPORT
============================

CANDIDATE INFORMATION
--------------------
Name: ${report.candidate.name}
Position: ${report.candidate.position}
Email: ${report.candidate.email}
Assessment Date: ${formatDate(report.session.timestamp)}

SESSION SUMMARY
--------------
Duration: ${formatTime(report.session.duration)}
Integrity Score: ${report.session.integrityScore}%
Total Violations: ${report.session.violations.length}
Risk Level: ${report.summary.riskLevel.toUpperCase()}
Result: ${report.summary.passed ? "PASSED" : "FAILED"}

VIOLATION DETAILS
----------------
${
  report.session.violations.length > 0
    ? report.session.violations
        .map((v, i) => `${i + 1}. [${formatTime(v.sessionTime)}] ${v.description} (${v.severity.toUpperCase()})`)
        .join("\n")
    : "No violations detected during the assessment."
}

DETECTION LOG
------------
${report.session.detectionLogs.map((log, i) => `${i + 1}. [${formatTime(log.sessionTime)}] ${log.message}`).join("\n")}

ASSESSMENT CONCLUSION
-------------------
${report.summary.recommendation}

RECOMMENDATIONS
--------------
${this.generateDetailedRecommendations(report)}

Report generated on: ${formatDate(report.generatedAt)}
System: SecureProctor v1.0
Generated by: AI-Powered Proctoring System
    `.trim()
  }

  private calculateRiskLevel(integrityScore: number, violationCount: number): "low" | "medium" | "high" {
    if (integrityScore >= 80 && violationCount <= 2) return "low"
    if (integrityScore >= 60 && violationCount <= 5) return "medium"
    return "high"
  }

  private generateRecommendation(integrityScore: number, riskLevel: "low" | "medium" | "high"): string {
    if (riskLevel === "low") {
      return "The candidate demonstrated high integrity throughout the assessment and is recommended to proceed to the next stage."
    } else if (riskLevel === "medium") {
      return "The candidate showed moderate integrity with some concerns. Review violations and consider additional assessment or interview."
    } else {
      return "The candidate's assessment raised significant integrity concerns. Recommend rejection or comprehensive re-evaluation."
    }
  }

  private generateDetailedRecommendations(report: AssessmentReport): string {
    const recommendations = []

    if (report.summary.riskLevel === "low") {
      recommendations.push("• Proceed with standard interview process")
      recommendations.push("• Candidate suitable for remote work arrangements")
      recommendations.push("• No additional proctoring measures required")
    } else if (report.summary.riskLevel === "medium") {
      recommendations.push("• Conduct follow-up interview to discuss violations")
      recommendations.push("• Consider additional technical assessment")
      recommendations.push("• Review specific violation patterns")
    } else {
      recommendations.push("• Do not proceed with current application")
      recommendations.push("• Consider offering re-assessment opportunity")
      recommendations.push("• Implement stricter proctoring if re-assessment approved")
    }

    return recommendations.join("\n")
  }

  exportToPDF(report: AssessmentReport): Blob {
    // In a real implementation, this would use a PDF library like jsPDF
    // For now, return text as blob
    const textReport = this.generateTextReport(report)
    return new Blob([textReport], { type: "text/plain" })
  }
}

// Export singleton instance
export const reportGenerator = new ReportGenerator()
